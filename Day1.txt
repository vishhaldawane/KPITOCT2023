



		Java Programming Language
				- with Vishhal



			Java Technologies
				|
		-----------------------------------
		|		|		|
		JSE		JEE		JME
		|		|		|
		Standard	Enterprise	Micro [ mobile ]
		CORE JAVA	|	
		|		|
Language fundamentals	--------------------
OOPS concepts		|		|
Packages		WEB		Enterprise Java Beans/component/class
Exception handling	|http 			|
Multithreading		Servlets	---------------------------------
Generics		JSP		|		|[pk]		|
Collections				Session		Entity		Message
File Handling			server	|		|		|
JDBC				|	----------	--------	-----
|				client	|	|	 |     |	|   |
Adv Java			     Stateless Statefull BMP  CMP	SMS Mail
|
Socket Programming
RMI
			written by Java developer = hard work 
			bean managed persistence
				CRUD	|
					storing the java object on the DB as a row

			Employee empObj1 = new Employee();
			Passenger passObj1 = new Passenger();
			Ticket ticketObj1 = new Ticket();
			Ticket ticketObj2 = new Ticket();
			Ticket ticketObj3 = new Ticket();
			Ticket ticketObj4 = new Ticket();

			auto-written by a framework like hibernate/jpa
			Container managed persistence			



A java program
----------------
.java file

Name of the .java file and the name of the public class must be the same
and u cannot have two public classes in a same source code

SavingsAccount.java
---------------------
public class SavingsAccount
{
}

-------------------------
Bank.java
class Savings
{
}
class Current { }
class Fixed { }
----------------------


javac Bank.java
	|
	Bank.class???? no 
	|
	Savings.class
	Current.class
	Fixed.class






class System
{
        public static PrintStream out = new PrintStream();

}




Association
------------------


	infrastructuaral	functional/operational
	|	|		|		|
	isA	hasA		usesA		producesA
	|	 |
aggregation composition


	class Machine
	{
	}
	class WashingMachine extends Machine //isA
	{
		WashingTub washTub = new WashingTub(); //hasA
		Panel panelObj = new Panel(); //hasA

		producesA	    usesA		usesA		usesA			usesA
		|			|		|		|			|
		Laundry       wash(Cloth clothObj[], Water waterObj, Electricity eleObj, WashingPowder washPowObj) {

			Laundry laundryObj = new Laundry();
			laundryObj.setClothCalc(clothObj.length*50);
			laundryObj.setElectricityCalc(30*eleObj.getUnitConsumed());
			laundryObj.setWaterCalc(waterObj.getSize() * 0.3);
			laundryObj.setWashingPowderCalc(washPowObj.getSize()*3);
			return laundryObj;
		}

	}


Thoughtrons
|
thoughts = faster than light = invisible = non-linear


Formula of Creation
-----------------------


	LEFT				RIGHT
	1				2
	think	+ feel		=	action	+ result
	|
	



















A
|
B
|
C
|
D

class A 
{
}

class B extends A
{
}





	class DryingArea
	{
		WashingMachine washMachineObj = new WashingMachine();//hasA

	}

	





Doctor
|
Surgeon




Drum
|isA
WashingDrum



Tub
|isA
WashingTub







class PrintStream
{
        void println() {
        }   
}

class Jungle
{
        public static Tiger tig = new Tiger();
}

class Tiger
{
        void jump() {
        }   
}

Jungle.tig.jump()



initial heap size
and max heap size

java -Xms50m -Xmx200m Bank.java

			


class Machine
{
}

	Class			vs		Object
	|					|
blueprint of an object			instance of a class

design of a house			the actual house(es)

logical					physical

simple text in a file			but it is a structure in the RAM
					with functionalities

class SavingsAccount			SavingsAccount savObj1 = new SavingsAccount();
{					SavingsAccount savObj2 = new SavingsAccount();
	data = acno,name,bal
	+
	functions = withdraw(){}
		deposit(){}
		showAccount(){}
		ctor
}


Naming Convention



	ClassName	DriverManager, WashingMachine, WashingPowder
	variableName	rollNumber, socialSecurityNumber, passportNumber
	methodName	setLookAndFeel(), transferFunds(), changeSocialSecurityNumber()
	CONSTANT	PI, MAX, MIN, MIN_PRIORITY, SPEED_OF_LIGHT
	packages	java.lang, java.awt.event, com.kpit.projects


	BankAccount bankAccObj1 = new BankAccount(101,"Jack",25000.0f);
	BankAccount bankAccObj2 = new BankAccount(102,"Jane",27000.0f);
	BankAccount bankAccObj3 = new BankAccount(103,"Jill",29000.0f);
	|		|	   |		|
	classname	reference  Allocator   the constructor
			to an
			object



STACK			HEAP
-----------------------------------
				DATA AREA

		accountNumber, accountHolderName, accountBalance
		------------------------------------------------
		|		|		|		|
		--------------------------------------------------
  +------------>100
  |
 100 <--value of this ref			METHOD AREA
bankAccObj1
					BankAccount(...) { }
					showBankAccount(){}
					deposit() { }
					withdraw() { }



		 accountNumber, accountHolderName, accountBalance
                ------------------------------------------------
                |               |               |               |   
                --------------------------------------------------
  +------------>200
  |
 200 <--value of this ref                     
bankAccObj2


 		accountNumber, accountHolderName, accountBalance
                ------------------------------------------------
                |               |               |               |
                --------------------------------------------------
  +------------>300
  |
 300 <--value of this ref                      
bankAccObj3


------------------




1. function without argument AND without return


	void clearScreen()
	{
		no variables passed,
		no value to return
	}


2. function with argument BUT without return

	void gotoLocation(float longitude, float lattitude)
	{
		use these two variables passed inside this function
		and no return.
	}

3. function with arguments AND with return value

	float calculateAverage(int a, int b, int c)
	{
		utilize these a,b and c
		float avg = (a+b+c)/3.0f;
		MUST return a float value (MANDATE)
		return avg;
	}

4. functin without arguments BUT with return value

	char calculateGrade()
	{
		no values passed here...
		but still process/calculate a grade and return it

		MUST return a char value (MANDATE)
		return 'A';
	}




1. Build a powerfull character

//STATIONARY 
class Camera
{
	int maximumPhotosToStore=1000; //hasA
	int currentPhotoCount; //hasA
	Lens lens = new Lens(); //hasA

	void click() {
		if(currentPhotoCount<maximumPhotosToStore) {	
			currentPhotoCount++;
		}
		else {
			System.out.println("MEmory is full");
		}	
	}
	
	void deletePic() {
		currentPhotoCount--;		
	}
	void zoomIn() { }
	void zoomOut() { }
}

class Person
{
	char gender;
	int age;
	String name;
	...set/get/ctor
}

class Photographer extends Person //isA
{
	Camera cam1 = new Camera();
	Camera cam2 = new Camera();

	//passing object as an argument knowsn as USES
	Photo capture(Actor a) 
	{
		a.smile();
		cam1.click();
		Photo photo = new Photo();
		return photo; //PRODUCES-A
	}
}

class Actor extends Person
{
	void smile() { 

	}
	void dance()
	{
	}
}


					Person
					|
				-----------------
				|isA		|isA		
	Camera			Photographer	Actor		Photo
	 - Lens			    Camera-hasA

				capture()
				{
				}




OOPs concepts
--------------
1. Abstraction
	- it is the "WHAT IS?" part of an object

		WHAT IS AN ATM?

			dispense cash

			a farmer can withdraw the cash from the ATM
			without knowing the internal functioning of an ATM
			
		hiding of data and concerned functions

			a. data abstraction
			b. procedural abstraction
			c. class abstraction
		
2. Encapsulation

	- it is the "HOW IS IT?" part of an object

			how the cash is dispensed ?
			ATM Engineer is responsible for this

	- binding of data and concerned functions 
	
			a. data encapsulation
				- private double totalCash

				- public void dispenseCash(float amtDispensed) {
						totalCash-=amtDispensed;
				  } 

	


	String 
	
3. Polymorphism

		ability of a business entity to have multiple forms

				Doctor
				| diagnose() { ENT }
			-----------------
			|
			Surgeon
			| diagnose() { ENT + CT scan }
		-------------------
		|
	HeartSurgeon
		| diagnose(){  ENT + CT Scan + ECG }


		Person
		| react() { shouting }
	Photographer 
	|react() { instruction for pose }
Cinematographer
| react() { instruction for movements }


		a. class extension
		b. function overloading
			class Phone
			{
				void dial() { }
				void dial(byte numberToDial) { }
				void dial(String name) { }
				void dial(byte num1, byte num2) { }
				void dial(byte num1, String name) { }
				void dial(String name, byte num1) { }

			}
		c. function overriding

	
		d. operator overloading

		System.out.println(10+20+" what is this "+(10+20))
		System.out.println(30+" what is this "+1020)
		System.out.println("30 what is this 1010")



4. Inheritance


		acquiring properties from existing business entities


	TYPE OF INHERITANCE


		DERIVATION		VS		IMPLEMENTATION
		|					|
	REGULAR SUPER CLASS			AN ABSTRACT CLASS/INTERFACE	
	| extends				| extends/implements
	A CHILD CLASS				A CHILD CLASS
		
	class SavingsAccount			abstract class BankAccount {
	{						
		void withdraw() { }		    abstract void withdraw();
	}					 }
	class FixedAccount extends SavingsAccount	class SavingsAccount extends BankAccount {
	{							void withdraw() { //MANDATORY
		void withdraw() { } //not mandatory		}
	}						}



	class A
	{
		void fun() { }
	}
	class B extends A
	{
		void fun() { } //not mandatory to override
	}

---------------------

	abstract class A
	{
		abstract void fun(); 
	}
	class B extends A
	{
		void fun(){ } // is mandatory
	}


	interface A {
		void fun();
	}
	interface B {
		void foo();
	}

	abstract class C {
		void fee();
	}
	class D extends C implements A,B
	{
		void fee() { }
		void foo() { }
		void fun() { }
	}






5. Object communication

	invoking method of another object






--------------------


	A Constructor


	- a function which has same name as of the enclosing class


class Milk
{

} <- the above class has a default ctor - it does NOTHING


class Milk
{
	Milk() {
	} <--- this is not a default constructor !!! why
			because it is visible to human eye
		- it can be used to initialize the state of the object

	Milk(int q) {
	} <-- parameterized ctor to set the quantity
	
}






Packages
---------

		to organize concerned classes in a folder


		packages 		=		folder
		|					|
		java					operating system
		|					|
		java.lang				c:\...\java\lang
		java.awt.event				c:\...\java\lang\event


				java <-- main
				|
		----------------------------------------------
		|	|	|	|	|	|			|
		lang	util	io	net	awt	sql <-- subpackages	awt
		|	|	|	|	 |  	|			|
		System	List  File	Socket	Button	Driver			event
		Thread  Set   Input-		Label	DriverManager		|
		Exception 	Stream			ResultSet		ActionEvent
		
	


	import java.awt.*;
	import java.awt.event.*;

				src
				|
			----------------------------------
				|			|
				jungle <-- main		App.java <--default package for this 
				|			  main(){ }	is src
		------------------------------------
		|	|	|	|
		cave	river	tree	house <-- sub packages
		|	|	|	|
		Tiger	Frog	Parrot	FarmHouse
		Lion	Fish	Sparrow
		Bear		Monkey

-----------------------------------
all below are in jungle.cave
class Tiger
{
    d
    p
    pro
    pub
}
class Lion
{
	void roar()
	{
		Tiger t = new Tiger();
		sop(t.d);//possible
		sop(t.p); // noway
		sop(t.pro);//possible
		sop(t.pub);//possible
	}
}


class Bear 
{
	void roar()
	{
		Tiger t = new Tiger();
		sop(t.d);//possible
		sop(t.p); // noway
		sop(t.pro);//possible
		sop(t.pub);//possible
	}
}

class WhiteTiger extends Tiger 
{
	void roar()
	{
		sop(d);//possible
		sop(p); // noway
		sop(pro);//possible
		sop(pub);//possible
	}
}
---------------------

jungle.river

class Frog
{
	void jump()
	{
		Tiger t = new Tiger();
		sop(t.d);//not-possible
		sop(t.p); // no chance
		sop(t.pro);//not-possible
		sop(t.pub);//possible
	}
}

class BengalTiger extends Tiger 
{
	void roar()
	{
		sop(d);//not-possible
		sop(p); // no chance
		sop(pro);//possible
		sop(pub);//possible
	}
	void jump()
	{
		Tiger t = new Tiger();
		sop(t.d);//not-possible
		sop(t.p); // no chance
		sop(t.pro);//not-possible
		sop(t.pub);//possible
	}
}
----------------

				bank
				|
		----------------------------------------------------
		|		|		|		|
		account		transfer	statement	services <-- modules
		|							|
	TigerComponent.ts [ controller]				Account.services.ts
	TigerComponent.html [view]
	TigerComponent.css [ style]


					

	1.                 [ accessible within the same folder ]

	2. private	[ can only be referred by the same class in which they are created]

	3. protected [ can be referred if the non-child is in hte same package,
			eg. Bear can access tiger.protectedC;
			but cannot access protectedC without Tiger's reference]

			WhiteTiger from cave can access protectedC with ref or 
			without reference

			BengalTiger from river canNOT access protectedC with ref
			but can access protectedC without ref being as child of
			Tiger


	4. public	 [ accessible to the whole world ]



---------------------------------------------------------------

Exception handling
------------------


	exception = runtime error

			when the program is running 
			it is raising an error to terminate
			the program

	
			erorrs
			|
	----------------------------------------------------
	|	 |	   |		|		|
	compile  runtime  linker 	fatal		logical
	|	 |	   |		 |		|
	syntax  exception missing	out of		4+4=16
			  libraries	memory		



			left brain	vs	right brain
			|			|
			male			female

	
		

		checked		vs		unchecked
		|				|
	fuel capacity				speed limit
	tyre pressure				lane drive
	health of the tyre			speed breakers
	battery status				traffic status
	coolant					road clearance status 
	brake oil				punctured tyre 
	brake pads				engine failed
	documents-4				accident
		rc book				airbags didnt work
		DL				some health issue 
		IP				
		PUC
	fasttag ETC recharge
	engine oil
	
checked by the compiler
unchecked by the compiler = ignored by the compiler = no mandate for try/catch

				Object
				 |
				Throwable
				 |
		---------------------------------------
		|				|
		Error			Exception
					 | checked [ except runtimeexception ]
				------------------------
				|			|
			RuntimeException	IOException   SQLException
			|- unchecke			|
		-------------------------	FileNotFoundException	
		|	    |	|
	ArithmeticException |	NullPointerException
			    |
		IndexOutOfBoundsException
			|
	------------------------------------
	|				|
ArrayIndexOutOfBoundsException	StringIndexOutOfBoundsException




			BankAccount
			|
	-------------------------------------------
	|		|			|
SavingsAccount		CurrentAccount	CreditCardAccount








abstract class
		- it contains optional partial contract

		- partial contract = function without body

		- may  have regular functions

		- it cannot be instantiated [ instance cannot be created ]
	
	

interfaces in java
		- it containts partial contract [ optional ]
		- it cannot have regular functions [ except the default ones ]
		- it cannot be instantiated
		- multiple interfaces can be implemented by the child class



	abstract class MusicalInstrument
	{
		abstract void playMusic();
	}

	



				Smiling
				| smile();
				|
				Magician
				| smile(){ }
				|
		----------------------------------
		|				|
		| Flipping 			| Flipping
		| | Rotating			| | Rotating
		| |   |				| | |
	   CardMagician			    HatMagician
		smil(){}			smile(){} <-- optional overriding
		rotate(){ } mandate		rotate(){} 
		flip(){}			flip(){ }

	
1. exclusive function | doMagic() in Magician
2. inherited function
3. overridden+overriding 
4. implemented function | from the interface


class A {
	void fun() { } //1.
}
class B extends A {
	//2. 
}
------------------
class C extends A {
	void fun() { //3
	}
}
--------------
interface X { void fee(); }
class D implements X {
	void fee() { } //4
}

interface A
{
	void fun();
}
interface B extends A
{
	void fee();
}

class C { }

class D extends C implements B
{

}
class E implements B
{

}

		A
		|extends
	C	B
extends	|	|implements
	---------
	|
	D


	
--------------------------------------------------

framework = semi-developed application

photoframe shopkeeper
----------------
1. various frames [ shapes and designs ]
2. of various sizes [ 10 02 30 40 inches
3. of varous materials [ plastic, wood, glass,  
4. glass [ non reflective or reflective ] 
5. quality
6. charge
7. time
8. skilled professionals


Collection = a bag


i			     Iterable <--Reactive
				| Iterator iterator()
				| 3
				|
i			   Collection
				| add(Object o);
				| 5
			------------------
			|duplicates	|unique
i			List		Set
			|10		|12
		-------------	------------------
		|	    |	|		|
c	ArrayList    LinkedList TreeSet	    HashSet
	18		18	20		20
	+		+	+		+	
	5		3	2		4
	--		--	--		--
	23		21	22		24
	|		|	
growable at	can grow at
at the end	any location
efficiently
like a 
Queue



java.util
jdk 1.8 docs


do you have a free will?

				x
				CONTENT
				|	ButterMilk
				|	PaneerChilly
				|	Noodles
				|	FriedRice
				|	CoconutWater
				|	Water
	y-------------------------------------------z
	CONTAINER		|		ALGORITHM
	|			|			|
	Glass			|			drink()
	Plate			|			eat();
	Plate			|			eat();
	Plate			i			eat();
	Coconut			ITERATOR
	WaterBottle		|
				Straw
				Fork
				ChopStiks
				Spoon

----------------------------------------------------------
JDBC
----


	Java Database Connectivity



***following diagram is not of inheritance

	Java						Database
	|						|
	your java program	 Driver	<-i		MySQL
				  |
				  |
				DriverManager<-c
				  |
			     Connection <-i
				  |
		------------------------------------
		|		|		|
	Statement<-i	PreparedStatement<-i	CallableStatement<-i
	|			|			|
	Select		insert/update/delete	procedure/function



	Steps to JDBC

	1. know your database - MySQL
	2. know your driver - com.mysql.jdbc.Driver

	3. connect to the database
		3a) load the driver
			DriverManager.registerDriver(new com.mysql.jdbc.Driver());
		3b) acquire the connection
			Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/mysql","root","root123");

	4. make a desired statement [ Statement/PreparedStatement/CallableStatement]
			Statement statement = conn.createStatement();
			
	5. fire the statement
			ResultSet result  =	statement.executeQuery("SELECT * FROM MYDEPT");
 
	6. acquire the result if any
	7. process the result if any
			while(result.next()) {
			}
	8. close the result if any
	9. close the statement
	10. close the connection



-----------------------

Annotation
-----------


	- it an extra information of the class,field,method,ctor,arugments,return values


	- it an extended version of comments

	-it can be availed in the source file or class file too

	- comments are limited only to the source code, but annotation can be
	 availed at the runtime environment


	comments			vs		annotations
	|
	-not standard way				standardized
	-can be written anywhere			classlevel, method level
							field leve, ctor level
							arg level, return type level

	- limited to source code			can be avalied at runtime too


----------------------------------------------------

Hibernante and JPA

	Java Persistence API
		|
	storing java object on the database a row (record)


	classes are not tables
	tables  are not classes


class Account{
   acno
   name
   bal
}
class Savings extends Account{
   rate
}
class Current extends Account{
   overdraft;
}
class Fixed extends Savings{
   maturityDate;
   maturityAmount
}
--------

Account a = new Account(101,"jack",10000);
Savings s = new Savings(102,"Jane",45000,4.7f);
Current c = new Current(103,"Peter",56000,0.25);
Fixed   f = new Fixed(104,"Smith",75000,10.5f,2028,125000);

	account_tbl
	---------------
	(pk)
	acno	name	bal
	101	jack	10000
	102     jane    45000
	103	peter	56000
	104	smith	75000

	savings_tbl
	------------
	(fk)
	acno  rate
	102   4.7

	current_tbl
	------------
	acno	overdraft
	103	0.25

	fixed_tbl
	-----------
	acno	rate	maturityDate maturityAmount
	104	10.5	2028	     125000



	java object mapped with database 

		Object Relation Mapping [ ORM ]

	Hibernate is ORM Framework

	JPA is an implementation of this f/w


JDBC - BMP
------
   1. load the driver
   2. connect
   3. statement
   4. fire the query, grab the result
   5. process the result
   6. close db resources

ORM - CMP
-------------
   1. configure the xml file 
	META-INF/persistence.xml
	( settings for loading the driver )
	 drivername, url, username, password

   2. specify the POJO [ plain old java object ]

	@Entity
	@Table(name="account_tbl")
	class Account
	{
	   @Id
           @Column(name="acno")
	   int accountNumber;

	   @Column(name="acname");
	   String accountHolderName;

	   @Column(name="acbal");
           float accountBalance
	}

    3. load the JPA framework libraries 

	EntityManagerFactory factory = 	Persistence.createEntityManagerFactory();
	
	EntityManager em = factory.createEntityManager();

	EntityTransaction trans = em.begin();
		Account acc = new Account(101,"Jack",5000);
		em.save(acc); //insert query is built up on its own and fired too
	trans.commit();

--------------------------------
	Account acc = 	em.find(Account.class,101); //SELECT 


	merge() ; UPDATE

	delete(); REMOVE

------------------------------------------------------


	maven project

	Project Management Tool

	




























4th generation time table
--------------------------


space time situation
==============================================================
		urgent		||		not-urgent
				||
==============================================================
		study		||	
important			||
				||
--------------------------------------------------------------
				||
				||	fb/yt/reels for tp
not-important			||	study
				||
--------------------------------------------------------------










































